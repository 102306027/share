#include <math.h>
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <time.h>
 
#include <fstream>
#include <iostream>
 
using namespace std;
 
#define IMG_WIDTH 220
#define IMG_HEIGHT 183
 
float entropy(cv::Mat img, vector<int> hist) {
 
    int n = img.cols * img.rows;
    float pro;
    float sum = 0;
    int times = 0;
 
    for (int i = 0; i < 256; i++) {
        if (hist.at(i) != 0) {
            pro = (float)hist.at(i) / n;
            // cout <<i<<' '<<pro<<endl;
            sum += -pro * log2(pro);
            // cout <<sum<<endl;
            times += 1;
        }
 
        // if(i==255){
        //     cout <<f1<<endl;
        // }
    }
 
    return sum / times;
}
 
vector<int> myCalcHist(cv::Mat img) {
    // int histSize = 256;
    // float range[] = { 0, 256 }; //the upper boundary is exclusive
    // const float* histRange[] = { range };
    // bool uniform = true, accumulate = false;
 
    vector<int> his;
    his.assign(256, 0);
 
    unsigned char *p;
    p = img.data;
 
    // cout<<hist[255]<<endl;
    // cout<<hist[256]<<endl;
    //  hist.at(p[50324])=5;
    //  cout<<hist[188]<<endl;
    //  hist.at(188)=10;
    //  cout<<hist[188]<<endl;
 
    for (unsigned int i = 0; i < IMG_WIDTH * IMG_HEIGHT; i++) {
        his.at(p[i]) = his.at(p[i]) + 1;
    }
 
    // for(int i=0;i<256;i++){
    //     cout<<i<<" "<<his.at(i)<<endl;
    // }
 
    // cv::Mat hist;
    // cv::calcHist(&img, 1, 0, cv::Mat(), hist, 1, &histSize, histRange, uniform, accumulate);
    return his;
}

vector<float> entropyList1;
vector<float> entropyList2;

void *exh1(void *arg) {
    cv::Mat img;
    img=*(cv::Mat *)arg;
    cv::Mat imgSrc = img.clone();
    unsigned char *p;
    p = imgSrc.data;

    int x1Max = 0;
    int x2Max = 0;
    int y1Max = 0;
    int y2Max = 0;
    float curMax = 0;
    float curEntropy = 0;

    for (float x1 = 0; x1 < 128; x1++) {
        for (float y1 = 0; y1 < 256; y1++) {
            for (float x2 = x1 + 1; x2 < 256; x2++) {
                for (float y2 = y1 + 1; y2 < 256; y2++) {
                    // cout<<clock()<<endl;
                    // cout<<typeid(p).name()<<endl;
 
                    for (unsigned int i = 0; i < IMG_WIDTH * IMG_HEIGHT; i++) {
                        if (p[i] < x1) {
                            p[i] = round(p[i] * y1 / x1);
                        } else if (p[i] >= x1 && p[i] < x2) {
                            p[i] = round((p[i] - x1) * (y2 - y1) / (x2 - x1) + y1);
                        } else if (x2 != 255) {
                            p[i] = round((p[i] - x2) * (255 - y2) / (255 - x2) + y2);
                        }
                    }
 
                    // cout<<clock()<<endl;
                    vector<int> his;
                    his = myCalcHist(imgSrc);
                    // cout<<clock()<<endl;

                    

                    curEntropy = entropy(imgSrc, his);
                    // cout<<curEntropy<<","<<x1<<","<<y1<<","<<x2<<","<<y2<<endl;
                    if (curEntropy >= curMax) {
                        curMax = curEntropy;
                        x1Max = x1;
                        x2Max = x2;
                        y1Max = y1;
                        y2Max = y2;
                        cout << "larger:" << curMax << "," << x1Max << "," << y1Max << "," << x2Max << "," << y2Max << endl;
                    }
                    // cout<<clock()<<endl;
                }
            }
        }
    }
    entropyList1.push_back(curMax);
    entropyList1.push_back(x1Max);
    entropyList1.push_back(x2Max);
    entropyList1.push_back(y1Max);
    entropyList1.push_back(y2Max);


}

void *exh2(void *arg) {
    cv::Mat img;
    img=*(cv::Mat *)arg;
    cv::Mat imgSrc = img.clone();
    unsigned char *p;
    p = imgSrc.data;

    int x1Max = 0;
    int x2Max = 0;
    int y1Max = 0;
    int y2Max = 0;
    float curMax = 0;
    float curEntropy = 0;

    for (float x1 = 128; x1 < 256; x1++) {
        for (float y1 = 0; y1 < 256; y1++) {
            for (float x2 = x1 + 1; x2 < 256; x2++) {
                for (float y2 = y1 + 1; y2 < 256; y2++) {
                    // cout<<clock()<<endl;
                    // cout<<typeid(p).name()<<endl;
 
                    for (unsigned int i = 0; i < IMG_WIDTH * IMG_HEIGHT; i++) {
                        if (p[i] < x1) {
                            p[i] = round(p[i] * y1 / x1);
                        } else if (p[i] >= x1 && p[i] < x2) {
                            p[i] = round((p[i] - x1) * (y2 - y1) / (x2 - x1) + y1);
                        } else if (x2 != 255) {
                            p[i] = round((p[i] - x2) * (255 - y2) / (255 - x2) + y2);
                        }
                    }
 
                    // cout<<clock()<<endl;
                    vector<int> his;
                    his = myCalcHist(imgSrc);
                    // cout<<clock()<<endl;

                    

                    curEntropy = entropy(imgSrc, his);
                    // cout<<curEntropy<<","<<x1<<","<<y1<<","<<x2<<","<<y2<<endl;
                    if (curEntropy >= curMax) {
                        curMax = curEntropy;
                        x1Max = x1;
                        x2Max = x2;
                        y1Max = y1;
                        y2Max = y2;
                        cout << "larger:" << curMax << "," << x1Max << "," << y1Max << "," << x2Max << "," << y2Max << endl;
                    }
                    // cout<<clock()<<endl;
                }
            }
        }
    }
    entropyList2.push_back(curMax);
    entropyList2.push_back(x1Max);
    entropyList2.push_back(x2Max);
    entropyList2.push_back(y1Max);
    entropyList2.push_back(y2Max);


}

void maxTransform(cv::Mat img) {
    pthread_t tid1,tid2;
    vector<float> entropyList1;
    vector<float> entropyList2;
    pthread_create(&tid1,NULL,exh1,&img);//創建線程
    pthread_create(&tid2,NULL,exh2,&img);
    pthread_join(tid1,NULL);
    pthread_join(tid2,NULL);

    if(entropyList1.at(0)>entropyList2.at(0)){
        cout << "max:" << entropyList1.at(0) << "," << entropyList1.at(1) << "," << entropyList1.at(2) << "," << entropyList1.at(3) << "," << entropyList1.at(4) << endl;
    }else{
        cout << "max:" << entropyList2.at(0) << "," << entropyList2.at(1) << "," << entropyList2.at(2) << "," << entropyList2.at(3) << "," << entropyList2.at(4) << endl;
    }


    // int x1Max = 0;
    // int x2Max = 0;
    // int y1Max = 0;
    // int y2Max = 0;
    
    // float curMax = 0;
    // cv::Mat imgSrc = img.clone();
    // unsigned char *p;
    // p = imgSrc.data;
    // for (float x1 = 0; x1 < 256; x1++) {
    //     for (float y1 = 0; y1 < 256; y1++) {
    //         for (float x2 = x1 + 1; x2 < 256; x2++) {
    //             for (float y2 = y1 + 1; y2 < 256; y2++) {
    //                 // cout<<clock()<<endl;
    //                 // cout<<typeid(p).name()<<endl;
 
    //                 for (unsigned int i = 0; i < IMG_WIDTH * IMG_HEIGHT; i++) {
    //                     if (p[i] < x1) {
    //                         p[i] = round(p[i] * y1 / x1);
    //                     } else if (p[i] >= x1 && p[i] < x2) {
    //                         p[i] = round((p[i] - x1) * (y2 - y1) / (x2 - x1) + y1);
    //                     } else if (x2 != 255) {
    //                         p[i] = round((p[i] - x2) * (255 - y2) / (255 - x2) + y2);
    //                     }
    //                 }
 
    //                 // cout<<clock()<<endl;
    //                 vector<int> his;
    //                 his = myCalcHist(imgSrc);
    //                 // cout<<clock()<<endl;
 
    //                 curEntropy = entropy(imgSrc, his);
    //                 // cout<<curEntropy<<","<<x1<<","<<y1<<","<<x2<<","<<y2<<endl;
    //                 if (curEntropy >= curMax) {
    //                     curMax = curEntropy;
    //                     x1Max = x1;
    //                     x2Max = x2;
    //                     y1Max = y1;
    //                     y2Max = y2;
    //                     cout << "larger:" << curMax << "," << x1Max << "," << y1Max << "," << x2Max << "," << y2Max << endl;
    //                 }
    //                 // cout<<clock()<<endl;
    //             }
    //         }
    //     }
    // }
    // cout << "max:" << curMax << "," << x1Max << "," << y1Max << "," << x2Max << "," << y2Max << endl;
 
    // cv::imshow("Display window", imgSrc);
    // int k = cv::waitKey(0);
 
    // ofstream ofs;
    // ofs.open("output.txt");
    // ofs << "max:" << curMax << "," << x1Max << "," << y1Max << "," << x2Max << "," << y2Max << "\n";
    // ofs.close();
}
 
void testTranform(cv::Mat img) {
    float x1 = 157;
    float y1 = 1;
    float x2 = 158;
    float y2 = 255;
    cv::Mat imgSrc = img.clone();
    // cout<<clock()<<endl;
    unsigned char *p;
    p = imgSrc.data;
    for (unsigned int i = 0; i < IMG_WIDTH * IMG_HEIGHT; i++) {
        if (p[i] < x1) {
            p[i] = round(p[i] * y1 / x1);
        } else if (p[i] >= x1 && p[i] < x2) {
            p[i] = round((p[i] - x1) * (y2 - y1) / (x2 - x1) + y1);
        } else if (x2 != 255) {
            p[i] = round((p[i] - x2) * (255 - y2) / (255 - x2) + y2);
        }
    }
    // cout<<clock()<<endl;
    vector<int> his;
    his = myCalcHist(imgSrc);
    cout << "this:" << his.at(0) << endl;
    for (int i = 0; i < 256; i++)
        cout << his.at(i) << " ";
    cout << endl;
    // cout<<clock()<<endl;
 
    float curEntropy = entropy(imgSrc, his);
 
    cout << "entropy:" << curEntropy << endl;
 
    // int histSize = 256;
    // float range[] = { 0, 256 }; //the upper boundary is exclusive
    // const float* histRange[] = { range };
    // bool uniform = true, accumulate = false;
    // cv::Mat hist;
    // cv::calcHist( &imgSrc, 1, 0, cv::Mat(), hist, 1, &histSize, histRange, uniform, accumulate );
    // int hist_w = 512, hist_h = 400;
    // int bin_w = cvRound( (double) hist_w/histSize );
    // cv::Mat histImage( hist_h, hist_w, CV_8UC3, cv::Scalar( 0,0,0) );
    // cv::normalize(hist, hist, 0, histImage.rows, cv::NORM_MINMAX, -1, cv::Mat() );
 
    //     for( int i = 1; i < histSize; i++ )
    // {
    //     line( histImage, cv::Point( bin_w*(i-1), hist_h - cvRound(hist.at<float>(i-1)) ),
    //         cv::Point( bin_w*(i), hist_h - cvRound(hist.at<float>(i)) ),
    //         cv::Scalar( 255, 0, 0), 2, 8, 0  );
    // }
 
    // hist.at<float>(i)
 
    //     hist.at<float>( i, j )
 
    cv::imshow("Source image", imgSrc );
    // cv::imshow("calcHist Demo", histImage );
    cv::waitKey(0);
    cv::imwrite("dark-write.jpg",imgSrc);
 
    // cv::imshow("Display window", imgSrc);
    // int k = cv::waitKey(0);
}
 
int main() {
    cv::Mat img = cv::imread("dark.jpg", 0);
    // cv::imshow("Display window", img);
    // int k = cv::waitKey(0); // Wait for a keystroke in the window
 
    cout << "Width : " << img.cols << endl;
    cout << "Height : " << img.rows << endl;
 
    vector<int> his = myCalcHist(img);
    // for(vector<int>::iterator i=hist.begin();i!=hist.end();++i)
    // cout<<*i<<endl;
 
    // int histSize = 256;
    // float range[] = { 0, 256 }; //the upper boundary is exclusive
    // const float* histRange[] = { range };
    // bool uniform = true, accumulate = false;
    // cv::Mat hist;
    // cv::calcHist( &img, 1, 0, cv::Mat(), hist, 1, &histSize, histRange, uniform, accumulate );
    // int hist_w = 512, hist_h = 400;
    // int bin_w = cvRound( (double) hist_w/histSize );
    // cv::Mat histImage( hist_h, hist_w, CV_8UC3, cv::Scalar( 0,0,0) );
    // cv::normalize(hist, hist, 0, histImage.rows, cv::NORM_MINMAX, -1, cv::Mat() );
 
    //     for( int i = 1; i < histSize; i++ )
    // {
    //     line( histImage, cv::Point( bin_w*(i-1), hist_h - cvRound(hist.at<float>(i-1)) ),
    //           cv::Point( bin_w*(i), hist_h - cvRound(hist.at<float>(i)) ),
    //           cv::Scalar( 255, 0, 0), 2, 8, 0  );
    // }
 
    // hist.at<float>(i)
 
    //     hist.at<float>( i, j )
 
    // cv::imshow("Source image", img );
    // cv::imshow("calcHist Demo", histImage );
    // cv::waitKey();
    // cout << hist.at<float>(254) <<endl;
 
    cout << "original:" << entropy(img, his) << endl;
 
    // change
 
    // black
    //  for( unsigned int i=20000; i< IMG_WIDTH*IMG_HEIGHT; i++ ){
    //      p[i]=0;
    //  }
 
    // unsigned char *p;
    // p = img.data;
    // p[50324]=p[50324]/2;
    // for( unsigned int i=0; i< img.cols*img.rows; i++ )
    //     cout<< (int)p[i]<<" ";
 
    maxTransform(img);
 
    //testTranform(img);
 
    return 0;
}
 
 

